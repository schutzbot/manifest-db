#!/usr/bin/python3
"""
OSBuild image based tests
"""

import argparse
import fnmatch
import json
import os
import platform
import subprocess
import sys
import traceback
import shutil

from collections import defaultdict
from typing import Iterator, List, Optional, Dict

import osbuild
import osbuild.meta


RESET = "\033[0m"
GREEN = "\033[32m"
BOLD = "\033[1m"
RED = "\033[31m"
YELLOW = "\033[33m"


class OSBuild:
    """
    Takes care of building images using OSBuild
    """

    def __init__(self, path, store, outdir, verbose):
        self.path = path
        self.store = store
        self.outdir = outdir
        self.checkpoints = []
        self.verbosity = 2 if verbose else 1

    def compile(self, manifest: Dict, exports: List, checkpoints=None):
        res = self._run([],
                        manifest=manifest,
                        exports=exports,
                        checkpoints=checkpoints)
        return res

    def _run(self,
             args: Optional[List[str]] = None,
             manifest: Optional[dict] = None,
             exports: Optional[List] = None,
             checkpoints: Optional[List] = None):

        cmd = [
            self.path,
            "--store", os.fspath(self.store),
            "--output-dir", os.fspath(self.outdir),
            "--json",
        ]

        if args:
            cmd += args

        for checkpoint in self.checkpoints + (checkpoints or []):
            cmd += [
                "--checkpoint", checkpoint
            ]

        for export in (exports or []):
            cmd += [
                "--export", export
            ]

        data = None
        if manifest:
            data = json.dumps(manifest, indent=2).encode("utf-8")
            cmd += [
                "-",
            ]

        if self.verbosity > 1:
            print("+" + " ".join(cmd), file=sys.stderr)

        r = subprocess.run(cmd,
                           check=False,
                           input=data,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)

        if r.returncode != 0:
            stdout = r.stdout.decode("utf-8").strip()

            try:
                r_data = json.loads(stdout)
            except json.JSONDecodeError:
                msg = r.stderr.decode("utf-8").strip()
                msg += r.stdout.decode("utf-8").strip()
            else:
                msg = r_data.get("title")

            msg = r.stderr.decode("utf-8").strip()
            msg += r.stdout.decode("utf-8").strip()
            raise RuntimeError("osbuild failed: " + msg)

        return json.loads(r.stdout.decode("utf-8"))


class ImageInfo:
    """
    Invokes the image-info executable
    """

    def __init__(self, path: str, verbose):
        self.path = path
        self.verbosity = 2 if verbose else 1

    def run(self, target: str):
        cmd = [
            self.path,
            target
        ]

        if self.verbosity > 1:
            print("+" + " ".join(cmd), file=sys.stderr)

        r = subprocess.run(cmd,
                           check=False,
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)

        if r.returncode != 0:
            msg = r.stderr.decode("utf-8").strip()
            msg += r.stdout.decode("utf-8").strip()
            raise RuntimeError("image-info failed: " + msg)

        return json.loads(r.stdout.decode("utf-8"))


#pylint: disable=too-many-instance-attributes
class TestCase:
    """
    Hosts a test case with its input manifest and desired image-info,
    can validate the manifest
    can use OSBuild to build the manifest
    can use ImageInfo to produce a resulting image-info from this build
    can compare the produced image-info from the reference one
    can dump the built image-info to disk
    """

    def __init__(self, path, data: Dict, osb: OSBuild, imi: ImageInfo) -> None:
        self.path = path
        self.osb = osb
        self.imi = imi
        self.id = data["id"]
        self.info = data["desc"]
        self.desc = data["manifest"]
        self.desired_image_info = data.get("image-info")

        self.manifest: Optional[osbuild.Manifest] = None
        self.result: Optional[Dict] = None
        self.error: Optional[str] = None
        self.built_image_info = None

    def __str__(self):
        res = str(self.id)
        extra = []

        if not self.desired_image_info:
            extra += ["no-image-info"]

        if extra:
            res += f" [{', '.join(extra)}]"

        return res

    @classmethod
    def load(cls, path: str, osb: OSBuild, imi: ImageInfo) -> "TestCase":
        with open(path, "r", encoding='utf8') as f:
            data = json.load(f)

        return cls(path, data, osb, imi)

    @staticmethod
    def _show_validation(result, name="validation"):
        print(f"{BOLD}{name}{RESET} ", end='')

        if result:
            print(f"is {BOLD}{GREEN}valid{RESET}")
            return

        print(f"has {BOLD}{RED}errors{RESET}:")
        print("")

        for error in result:
            print(f"{BOLD}{error.id}{RESET}:")
            print(f"  {error.message}\n")

    def load_manifest(self, index: osbuild.meta.Index, verbose=False) -> bool:
        info = index.detect_format_info(self.desc)
        if not info:
            self.error = "Unsupported manifest format"
            return False

        fmt = info.module

        try:
            res = fmt.validate(self.desc, index)
            if not res:
                if verbose:
                    TestCase._show_validation(res)
                self.error = "Invalid manifest: validation failed"
                return False

            self.manifest = fmt.load(self.desc, index)
        except Exception as e:  # pylint: disable=broad-except
            if verbose:
                print(traceback.format_exc())
            self.error = f"EXCEPTION: {e}"
            return False

        return True

    def _detect_exports(self) -> List[str]:
        if not self.manifest:
            return []
        pipelines = self.manifest.pipelines
        if not pipelines:
            return []
        # for now we just assume the last pipeline is the export
        return [next(reversed(pipelines))]

    def _detect_checkpoints(self) -> List[str]:
        if not self.manifest:
            return []

        checkpoints = []
        build = self.manifest.get("build")
        if build:
            checkpoints += [build.name]

        commit = self.manifest.get("ostree-commit")
        if commit:
            checkpoints += [commit.name]

        return checkpoints

    def build(self) -> bool:
        """
        Build the manifest in the test case and compile the image-info out of it.
        Upon error, store the reason in test.error and return False.
        """
        if not self.manifest:
            return False
        try:
            # Build the image using OSBuild
            self.result = self.osb.compile(
                self.desc,
                self._detect_exports(),
                self._detect_checkpoints())

            # construct the image path
            # assume if there's no filename in the last stage that image.raw will work
            pipeline = self.manifest.pipelines[self._detect_exports()[0]]
            filename = pipeline.stages[-1].options.get("filename", "image.raw")
            image_path = os.path.join(self.osb.outdir, self._detect_exports()[0], filename)

            # check if the image exists
            if not os.path.exists(image_path):
                self.error = f"image {image_path} not produced"
                return False

            # compile the image-info
            self.built_image_info = self.imi.run(image_path)
        except RuntimeError as e:
            self.error = str(e)
            return False
        return True

    def compare(self):
        def filter_fn(imi):
            """
            Filter specific fields in the image-info that can't be compared
            together.
            """
            def lvm2(imi):
                """
                LVM2 partitions have a UUID that is not fixed. Replace the value
                upon comparison time
                """
                partitions = imi.get("partitions")
                if partitions:
                    for partition in partitions:
                        if partition.get("fstype") == "LVM2_member":
                            partition["uuid"] = "2022-07-01-fixed-uuid"
                return imi

            def iso(imi):
                """
                For isos, the partition UUID is the date of the build. Replace
                that with a fixed one for the comparison.
                """
                if "image-format" in imi and "type" in imi["image-format"] and imi["image-format"]["type"] == "raw":
                    if "partitions" in imi:
                        for partition in imi["partitions"]:
                            if "fstype" in partition:
                                if partition["fstype"] == "iso9660":
                                    partition["uuid"] = "2022-07-01-fixed-uuid"
                return imi
            return iso(lvm2(imi))

        if filter_fn(self.built_image_info) != filter_fn(self.desired_image_info):
            self.error = "image-info mismatch"
            return False
        return True

    def dump(self, folder):
        os.makedirs(folder, exist_ok=True)
        with open(os.path.join(folder, f"{self.id}.json"), "w", encoding="utf-8") as f:
            json.dump(self.built_image_info, f)


class TestCases:
    """
    Tool to load, filter, and print stats about test cases
    """

    @staticmethod
    def _load_tests(path, osb: OSBuild, imi: ImageInfo) -> Iterator[TestCase]:
        files = os.scandir(path)

        for entry in files:
            if not entry.is_file():
                continue

            fullpath = os.path.join(path, entry.name)
            case = TestCase.load(fullpath, osb, imi)
            yield case

    @staticmethod
    def _make_filter(arch, distro, name):
        def fn(test):
            info = test.info

            if arch and info["arch"] != arch:
                return False

            if distro and info["distro"] != distro:
                return False

            if name:
                return fnmatch.fnmatch(test.id, name)

            return True

        return fn

    @staticmethod
    def _print_stats(tests: List[TestCase]) -> None:
        distros: Dict[str, int] = defaultdict(int)
        archs: Dict[str, int] = defaultdict(int)
        types: Dict[str, int] = defaultdict(int)

        for test in tests:
            print(test)
            distros[test.info["distro"]] += 1
            archs[test.info["arch"]] += 1
            types[test.info["image-type"]] += 1

        print("Distributions:")
        for distro, count in sorted(distros.items()):
            print(f"\t{distro}: {count}")

        print("Architectures:")
        for arch, count in sorted(archs.items()):
            print(f"\t{arch}: {count}")

        print("Image types:")
        for image_type, count in sorted(types.items()):
            print(f"\t{image_type}: {count}")

    @staticmethod
    def load(arch, distro, name, verbose, libdir, osb: OSBuild, imi: ImageInfo, db) -> List[TestCase]:
        index = osbuild.meta.Index(libdir)
        tests = list(TestCases._load_tests(db, osb, imi))
        tests = list(filter(TestCases._make_filter(arch, distro, name), tests))

        # Validate the manifests of the selected test cases
        for test in tests:
            print(f"{test.id}", end="", flush=True)
            if not test.load_manifest(index, verbose=verbose):
                print(f" {RED}FAIL{RESET}: {test.error}", end="")
            print("")

        TestCases._print_stats(tests)
        return tests


def clean_output(folder):
    """
    Empty the output folder as it can get quite big after a few runs.
    """
    for root, dirs, files in os.walk(folder):
        for f in files:
            os.unlink(os.path.join(root, f))
        for d in dirs:
            shutil.rmtree(os.path.join(root, d))


#pylint: disable=too-many-branches
def main():
    parser = argparse.ArgumentParser(description="osbuild image tests")
    parser.add_argument("--osbuild-path",
                        metavar="PATH",
                        type=os.path.abspath,
                        dest="osbuild",
                        default="/usr/bin/osbuild",
                        help="path to the osbuild executable"
                        )
    parser.add_argument(
        "--image-info-path",
        metavar="PATH",
        type=os.path.abspath,
        dest="image_info",
        default="tools/image-info",
        help="path to the image-info executable"
    )
    parser.add_argument(
        "--tempdir",
        metavar="DIRECTORY",
        type=os.path.abspath,
        default="/var/lib/osbuild-tests",
        help="directory where intermediary files will be stored")
    parser.add_argument(
        "--store",
        metavar="DIRECTORY",
        type=os.path.abspath,
        default="/var/lib/osbuild/store",
        help="directory where intermediary os trees are stored")
    parser.add_argument(
        "--output",
        metavar="DIRECTORY",
        type=os.path.abspath,
        default="/var/lib/osbuild/out",
        help="directory where result objects are stored")
    parser.add_argument(
        "--image-info-output",
        metavar="DIRECTORY",
        type=os.path.abspath,
        default="generated-image-infos/",
        help="directory where produced image info JSON will be stored")
    parser.add_argument(
        "--arch",
        metavar="ARCHITECTURE",
        type=str,
        default=platform.machine(),
        help="filter tests by architecture [default: host]")
    parser.add_argument(
        "--distro",
        metavar="DISTRIBUTION",
        type=str,
        help="filter tests by distribution")
    parser.add_argument(
        "--name",
        metavar="NAME",
        type=str,
        help="filter tests by name"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        default=False,
        help="Do not compile test cases"
    )
    parser.add_argument(
        "-l", "--libdir",
        metavar="DIRECTORY",
        type=os.path.abspath,
        default="/usr/lib/osbuild",
        help="directory containing the osbuild modules and library"
    )
    parser.add_argument(
        "--verbose",
        action="store_true",
        default=False,
        help="output more info"
    )
    parser.add_argument(
        "--generator-mode",
        action="store_true",
        default=False,
        help="Disengage comparison of the built images to their reference in the"
        " DB, turns the program into an image-info generator"
    )
    parser.add_argument(
        "--db-path",
        type=os.path.abspath,
        default="manifest-db",
        help="path to the database folder"
    )

    args = parser.parse_args()

    print(f"Running in {os.path.realpath(os.curdir)}")

    tests = TestCases.load(
        args.arch,
        args.distro,
        args.name,
        args.verbose,
        args.libdir,
        OSBuild(args.osbuild, args.store, args.output, args.verbose),
        ImageInfo(args.image_info, args.verbose),
        args.db_path)

    success = True
    if not tests:
        print(f"{RED}FAIL{RESET}: no tests to run")
        success = False

    for test in tests:
        print(f"{test.id}", end=" ", flush=True)
        # Skip for dry run
        if args.dry_run:
            print(f"Dry run: {GREEN}SUCCESS{RESET}")
            continue
        # Skip test cases that have failed validation of their manifest
        if test.error:
            print(f"{YELLOW}Warning (ignoring){RESET}: {test.error}")
            continue

        # If the generator_mode flag is set, the program behaves as an
        # image-info generator and skip the validation step. Which means that it
        # won't error out if the comparison fails. Also it will trigger the
        # build for every image regardless of the presence of an image-info in
        # the corresponding test case to validate against.
        if args.generator_mode:
            print("Building only:", end=" ", flush=True)
        else:
            print("Building & Comparing:", end=" ", flush=True)
            # If the program is configured to build & compare, then if the
            # test case haven't an image-info to compare to, it's useless to
            # build it. Because in this mode we are only interested in comparing
            # with what's in the DB.
            if not test.desired_image_info:
                print(f"{YELLOW}Warning (ignoring){RESET}: No image info to compare to")
                continue

        if test.build():
            # Every generated image-info needs to be written to disk regardless
            # of the program running in generated mode or not. So that by
            # running the program on a CI, one can download an image-info that
            # failed comparison.
            test.dump(args.image_info_output)
            if not args.generator_mode:
                test.compare()
        if test.error:
            print(f"{RED}FAIL{RESET}: {test.error}")
            success = False
        else:
            print(f"{GREEN}SUCCESS{RESET}")

        # in any case, clean the output folder to avoid filling out disk space
        clean_output(args.output)

    return 1 if not success else 0


if __name__ == "__main__":
    sys.exit(main())
